// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/tat-101/bb-assignment-back/domain"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// AuthenticateUser provides a mock function with given fields: email, password
func (_m *UserService) AuthenticateUser(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type UserService_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *UserService_Expecter) AuthenticateUser(email interface{}, password interface{}) *UserService_AuthenticateUser_Call {
	return &UserService_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", email, password)}
}

func (_c *UserService_AuthenticateUser_Call) Run(run func(email string, password string)) *UserService_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserService_AuthenticateUser_Call) Return(_a0 string, _a1 error) *UserService_AuthenticateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_AuthenticateUser_Call) RunAndReturn(run func(string, string) (string, error)) *UserService_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *UserService) CreateUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *UserService_Expecter) CreateUser(user interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *UserService_CreateUser_Call) Run(run func(user *domain.User)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(*domain.User) error) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByID provides a mock function with given fields: id
func (_m *UserService) DeleteUserByID(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type UserService_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//   - id string
func (_e *UserService_Expecter) DeleteUserByID(id interface{}) *UserService_DeleteUserByID_Call {
	return &UserService_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", id)}
}

func (_c *UserService_DeleteUserByID_Call) Run(run func(id string)) *UserService_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserService_DeleteUserByID_Call) Return(_a0 error) *UserService_DeleteUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteUserByID_Call) RunAndReturn(run func(string) error) *UserService_DeleteUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserService) GetAllUsers() ([]domain.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *UserService_Expecter) GetAllUsers() *UserService_GetAllUsers_Call {
	return &UserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *UserService_GetAllUsers_Call) Run(run func()) *UserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserService_GetAllUsers_Call) Return(_a0 []domain.User, _a1 error) *UserService_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetAllUsers_Call) RunAndReturn(run func() ([]domain.User, error)) *UserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserService) GetUserByEmail(email string) (*domain.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserService_Expecter) GetUserByEmail(email interface{}) *UserService_GetUserByEmail_Call {
	return &UserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *UserService_GetUserByEmail_Call) Run(run func(email string)) *UserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserService_GetUserByEmail_Call) Return(_a0 *domain.User, _a1 error) *UserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByEmail_Call) RunAndReturn(run func(string) (*domain.User, error)) *UserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserService) GetUserByID(id uint) (*domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id uint
func (_e *UserService_Expecter) GetUserByID(id interface{}) *UserService_GetUserByID_Call {
	return &UserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *UserService_GetUserByID_Call) Run(run func(id uint)) *UserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserService_GetUserByID_Call) Return(_a0 *domain.User, _a1 error) *UserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByID_Call) RunAndReturn(run func(uint) (*domain.User, error)) *UserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserByID provides a mock function with given fields: id, updatedUser
func (_m *UserService) UpdateUserByID(id string, updatedUser domain.User) (*domain.User, error) {
	ret := _m.Called(id, updatedUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.User) (*domain.User, error)); ok {
		return rf(id, updatedUser)
	}
	if rf, ok := ret.Get(0).(func(string, domain.User) *domain.User); ok {
		r0 = rf(id, updatedUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, domain.User) error); ok {
		r1 = rf(id, updatedUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_UpdateUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserByID'
type UserService_UpdateUserByID_Call struct {
	*mock.Call
}

// UpdateUserByID is a helper method to define mock.On call
//   - id string
//   - updatedUser domain.User
func (_e *UserService_Expecter) UpdateUserByID(id interface{}, updatedUser interface{}) *UserService_UpdateUserByID_Call {
	return &UserService_UpdateUserByID_Call{Call: _e.mock.On("UpdateUserByID", id, updatedUser)}
}

func (_c *UserService_UpdateUserByID_Call) Run(run func(id string, updatedUser domain.User)) *UserService_UpdateUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.User))
	})
	return _c
}

func (_c *UserService_UpdateUserByID_Call) Return(_a0 *domain.User, _a1 error) *UserService_UpdateUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_UpdateUserByID_Call) RunAndReturn(run func(string, domain.User) (*domain.User, error)) *UserService_UpdateUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *UserService) ValidateToken(token string) (*domain.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type UserService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *UserService_Expecter) ValidateToken(token interface{}) *UserService_ValidateToken_Call {
	return &UserService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *UserService_ValidateToken_Call) Run(run func(token string)) *UserService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserService_ValidateToken_Call) Return(_a0 *domain.User, _a1 error) *UserService_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ValidateToken_Call) RunAndReturn(run func(string) (*domain.User, error)) *UserService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
